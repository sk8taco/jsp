/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2020-02-19 01:33:34 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class includeTest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


	// 선언문에 선언된 문장 -> 멤버변수로 변환
	String str = "Testing practice";
	String getStr(){
		return str;
	}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/./bottom/bottom.html", Long.valueOf(1582075156367L));
    _jspx_dependants.put("/./sub/JspModule.java", Long.valueOf(1582075982196L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }
    
    // 내장객체를 선언하는 구문 (8개 +2개 (request,response) -> 메서드의 매개변수로 전달되면서 만들어짐
    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null; // 회원로그인시 필요 - 메모리에 저장
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config; // 서블릿의 환결설정
    javax.servlet.jsp.JspWriter out = null; // 데이터 출력,전송시 필요
    final java.lang.Object page = this; // 현재 jsp페이지에서만 사용이 가능한 객체
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
    	//내장객체를 생성해서 가져오는 구문
      response.setContentType("text/html; charset=UTF-8");
      // 객체를 얻어오는 3번째(메서드의 반환형을 통해서 넘어온다.
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;
      
      //out.println() -> 있는 그대로 출력 / out.write(변환해서 출력)
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
    
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>include지시어 특징</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("  <h3>이 페이지는 include지시어를 연습하기위해서 만들어진 페이지입니다.</h3>\r\n");
      out.write("  <h3>테스트중입니다.</h3>\r\n");
      out.write("  <h3>테스트중입니다.</h3>\r\n");
      out.write("   ");
      out.print(getStr() );
      out.write("\r\n");
      out.write("  <h3>테스트중입니다.</h3>\r\n");
      out.write("  <h3>테스트중입니다.</h3>\r\n");
      out.write("  <h3>테스트중입니다.</h3>\r\n");
      out.write("  ");
      out.print(getStr() );
      out.write("\r\n");
      out.write("  <h3>테스트중입니다.</h3>\r\n");
      out.write("  <h3>테스트중입니다.</h3>\r\n");
      out.write("  <h3>테스트중입니다.</h3>\r\n");
      out.write("  ");
      out.print(getStr() );
      out.write("\r\n");
      out.write("  <h3>테스트중입니다.</h3>\r\n");
      out.write("  <h3>테스트중입니다.</h3>\r\n");
      out.write("  <h3>테스트중입니다.</h3>\r\n");
      out.write("  <h3>테스트중입니다.</h3>\r\n");
      out.write("  <h3>테스트중입니다.</h3>\r\n");
      out.write("  <h3>테스트중입니다.</h3>\r\n");
      out.write("  ");
      out.write("<div class=\"area_user\">\r\n");
      out.write("\t\t\t<div class=\"au_wrap\">\r\n");
      out.write("\t\t\t\t<h3 class=\"au_tit\">Creators</h3>\r\n");
      out.write("\t\t\t\t<ul class=\"au_l\">\r\n");
      out.write("\t\t\t\t\t<li class=\"au_item\"><a href=\"http://www.navercorp.com/ko/service/creators.nhn\" data-clk=\"crt.creator\" class=\"au_a\">í¬ë¦¬ìì´í°</a></li>\r\n");
      out.write("\t\t\t\t\t<li class=\"au_item\"><span class=\"au_bar\"></span><a href=\"http://www.navercorp.com/ko/service/business.nhn\" data-clk=\"crt.smbusiness\" class=\"au_a\">ì¤ëª°ë¹ì¦ëì¤</a></li>\r\n");
      out.write("\t\t\t\t</ul>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div class=\"au_wrap\">\r\n");
      out.write("\t\t\t\t<h3 class=\"au_tit\">Partners</h3>\r\n");
      out.write("\t\t\t\t<ul class=\"au_l\">\r\n");
      out.write("\t\t\t\t\t<li class=\"au_item\"><a href=\"http://business.naver.com/guide.html\" data-clk=\"ptn.guide\" class=\"au_a\">ë¹ì¦ëì¤ íí¸ë ìë´</a></li>\r\n");
      out.write("\t\t\t\t\t<li class=\"au_item\"><span class=\"au_bar\"></span><a href=\"http://business.naver.com/service.html\" data-clk=\"ptn.service\" class=\"au_a\">ë¹ì¦ëì¤ Â· ê´ê³ </a></li>\r\n");
      out.write("\t\t\t\t\t<li class=\"au_item\"><span class=\"au_bar\"></span><a href=\"https://sell.storefarm.naver.com/#/home/about\" data-clk=\"ptn.store\"class=\"au_a\">ì¤í ì´ ê°ì¤</a></li>\r\n");
      out.write("\t\t\t\t\t<li class=\"au_item\"><span class=\"au_bar\"></span><a href=\"https://smartplace.naver.com/\" data-clk=\"ptn.place\"class=\"au_a\">ì§ì­ìì²´ ë±ë¡</a></li>\r\n");
      out.write("\t\t\t\t</ul>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div class=\"au_wrap\">\r\n");
      out.write("\t\t\t\t<h3 class=\"au_tit\">Developers</h3>\r\n");
      out.write("\t\t\t\t<ul class=\"au_l\">\r\n");
      out.write("\t\t\t\t\t<li class=\"au_item\"><a href=\"http://developers.naver.com\" data-clk=\"dvl.center\" class=\"au_a au_sa\">ë¤ì´ë² ê°ë°ìì¼í°</a></li>\r\n");
      out.write("\t\t\t\t\t<li class=\"au_item\"><span class=\"au_bar\"></span><a href=\"https://developers.naver.com/docs/common/openapiguide/#/apilist.md/\" data-clk=\"dvl.openapi\" class=\"au_a\">ì¤í API</a></li>\r\n");
      out.write("\t\t\t\t\t<li class=\"au_item\"><span class=\"au_bar\"></span><a href=\"http://naver.github.io/\" data-clk=\"dvl.opensource\" class=\"au_a\">ì¤íìì¤</a></li>\r\n");
      out.write("\t\t\t\t\t<li class=\"au_item\"><span class=\"au_bar\"></span><a href=\"http://d2.naver.com/\" data-clk=\"dvl.d2\" class=\"au_a\">ë¤ì´ë² D2</a></li>\r\n");
      out.write("\t\t\t\t\t<li class=\"au_item\"><span class=\"au_bar\"></span><a href=\"http://www.naverlabs.com/\" data-clk=\"dvl.labs\" class=\"au_a\">ë¤ì´ë² ë©ì¤</a></li>\r\n");
      out.write("\t\t\t\t</ul>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
